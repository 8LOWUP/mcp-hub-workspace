plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id "io.sentry.jvm.gradle" version "5.12.0"
}

group = 'mcphub'
version = '0.0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven {
        name = 'Central Portal Snapshots'
        url = 'https://central.sonatype.com/repository/maven-snapshots/'
    }
}

// for sentry
sentry {
	// Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
	// This enables source context, allowing you to see your source
	// code as part of your stack traces in Sentry.
	includeSourceContext = true

	org = "8lowup"
	projectName = "dev-mcp-hub-server"
	includeSourceContext = false // 소스코드 노출 안함, todo 장기적으로는 멀티모듈 구조로 gRPC 코드와 애플리케이션 코드를 분리
	authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation('org.springframework.boot:spring-boot-starter-data-redis') {
		exclude group: 'io.lettuce', module: 'lettuce-core'
	}
	implementation 'io.lettuce:lettuce-core:6.2.6.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework:spring-tx'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:mysql'

	// 스프링 시큐리티를 사용하기 위한 스타터 추가
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

    // oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	//jwt 사용
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// 스웨거 사용
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'

	// AWS 서비스 의존성 추가
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// QueryDsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	//엑셀파일 처리
	implementation 'org.apache.poi:poi:4.1.2'
	implementation 'org.apache.poi:poi-ooxml:4.1.2'
	implementation 'commons-io:commons-io:2.11.0'

	//json path
	implementation 'com.jayway.jsonpath:json-path:2.6.0'
	implementation 'com.auth0:java-jwt:3.18.2'

	// Bucket4j Core
	implementation 'com.bucket4j:bucket4j-core:8.7.1'

	// Redis 기반의 Bucket4j 확장
	implementation 'com.bucket4j:bucket4j-redis:8.7.1'

	//google gemini
	implementation 'com.google.genai:google-genai:1.15.0'

	//OpenAI
	implementation 'com.openai:openai-java:3.5.0'

	//Anthropic
	implementation 'com.anthropic:anthropic-java:2.6.0'

	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

	// prometheus
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
	useJUnitPlatform()
}
